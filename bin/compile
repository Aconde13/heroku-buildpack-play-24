#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# Parse args
BUILD_DIR=$1
CACHE_DIR=$2

PLAY_PATH=".play"
IVY_PATH=".ivy2"

# Change dir to handle relative paths
cd $BUILD_DIR

# Unpack cache
for DIR in $PLAY_PATH $IVY_PATH ; do
  rm -rf $DIR
  if [ -d $CACHE_DIR/$DIR ]; then
    cp -r $CACHE_DIR/$DIR $DIR
  fi
done

fail_compile()
{
  echo " !     Failed to build Play! application"
  exit 1
}

check_compile_status()
{
  if [ "${PIPESTATUS[*]}" != "0 0" ]; then
    fail_compile
  fi
}

# Install Play! if not already
if [ ! -d $PLAY_PATH ]; then
  PLAY_URL="https://s3-us-west-1.amazonaws.com/language-pack-play/play-heroku.tar.gz"

  echo -n "-----> Installing Play!....."
  curl --silent --max-time 90 --location $PLAY_URL | tar xz
  check_compile_status
  chmod +x $PLAY_PATH/play
  echo " done"
fi

if [ ! -f Procfile ]; then
  cat <<EOF > Procfile
web:    play run --http.port=\$PORT
EOF
  echo "-----> No Procfile found. Will use Procfile: "
  cat Procfile | sed -u 's/^/       /' 
fi

# Build app
echo "-----> Building Play! application..."
# Precompile each application represented by an application.conf file
# (Do not precompile copied modules or anything found in the Play! framework)
for DIR in $(find -wholename "*/conf/application.conf" ! -wholename "*modules*" ! -wholename "$PLAY_PATH*" -type f | sed 's/conf\/application.conf//')
do
  PRECOMPILE_CMD="$PLAY_PATH/play precompile $DIR --deps 2>&1"
  echo "       Resolving dependencies and precompiling: $PRECOMPILE_CMD" 
  eval "$PRECOMPILE_CMD" | sed -u 's/^/       /'
  check_compile_status
done

# Repack Play! framework into cache
mkdir -p $CACHE_DIR
for DIR in $PLAY_PATH $IVY_PATH ; do
  rm -rf $CACHE_DIR/$DIR
  cp -r $DIR $CACHE_DIR/$DIR
done

