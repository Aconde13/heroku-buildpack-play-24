#!/usr/bin/env bash
set -e

# --- Args provistos por Heroku buildpacks ---
BUILD_DIR="$1"
CACHE_DIR="$2"
ENV_DIR="$3"

# --- Ubicar y cargar utilidades del propio buildpack ---
BIN_DIR="$(cd "$(dirname "$0")" && pwd)"
. "$BIN_DIR/common.sh"

# --- Utilidad para imprimir con indent ---
indent() { while IFS= read -r line; do printf '       %s\n' "$line"; done; }

# --- Exportar variables de entorno desde ENV_DIR (si existen) ---
export_env_dir "$ENV_DIR" || true

# --- Asegurar cache dir ---
mkdir -p "$CACHE_DIR"

# --- Java 1.8 por defecto si no hay system.properties ---
if [ ! -f "$BUILD_DIR/system.properties" ]; then
  echo "java.runtime.version=1.8" > "$BUILD_DIR/system.properties"
fi

# --- Instalar Python 2.7 portable (para tooling de Play 1) ---
PYTHON2_VERSION="2.7.18"
PYTHON2_DIR=".python2"
PYTHON2_BUILD_DIR="Python-${PYTHON2_VERSION}"

if [ ! -d "$BUILD_DIR/$PYTHON2_DIR" ]; then
  echo "-----> Downloading and compiling Python ${PYTHON2_VERSION}..."
  /usr/bin/curl -L -o python2.tgz "https://github.com/Cliengo/heroku-buildpack-play-24/releases/download/heroku-24/Python-2.7.18.tgz"
  tar -xzf python2.tgz
  rm -f python2.tgz

  # Mover al BUILD_DIR si se extrajo en cwd
  if [ ! -d "$BUILD_DIR/$PYTHON2_BUILD_DIR" ] && [ -d "$PYTHON2_BUILD_DIR" ]; then
    mv "$PYTHON2_BUILD_DIR" "$BUILD_DIR/"
  fi

  cd "$BUILD_DIR/$PYTHON2_BUILD_DIR"
  ./configure --prefix="$BUILD_DIR/$PYTHON2_DIR" --enable-unicode=ucs4 --enable-shared
  make -j"$(nproc)"
  make install
  cd "$BUILD_DIR"
  rm -rf "$PYTHON2_BUILD_DIR"

  echo "-----> Python ${PYTHON2_VERSION} compiled and installed at $PYTHON2_DIR"
else
  echo "-----> Python ${PYTHON2_VERSION} already installed"
fi

# PATH/LD_LIBRARY_PATH para build
export PATH="$BUILD_DIR/$PYTHON2_DIR/bin:$PATH"
export LD_LIBRARY_PATH="$BUILD_DIR/$PYTHON2_DIR/lib:$LD_LIBRARY_PATH"

# Runtime: mantener mismas vars
mkdir -p "$BUILD_DIR/.profile.d"
cat > "$BUILD_DIR/.profile.d/python2.sh" <<EOF
export PATH="/app/.python2/bin:\$PATH"
export LD_LIBRARY_PATH="/app/.python2/lib:\$LD_LIBRARY_PATH"
EOF

# Wrapper para play que exporta LD_LIBRARY_PATH antes de ejecutar
cat > "$BUILD_DIR/.play-wrapper" <<'EOF'
#!/bin/bash
export LD_LIBRARY_PATH="/app/.python2/lib:$LD_LIBRARY_PATH"
/app/.play/play "$@"
EOF
chmod +x "$BUILD_DIR/.play-wrapper"

# --- Instalar OpenJDK 1.8 (el common.sh ya usa /usr/bin/curl y valida URL) ---
echo "-----> Installing OpenJDK..."
JDK_DIR="$BUILD_DIR/.jdk"
mkdir -p "$JDK_DIR"
# El common.sh espera JDK_URL seteada dentro de install_openjdk; si no, la fija para 1.8
install_openjdk "1.8" "$BUILD_DIR" "$BIN_DIR"
echo "       Done installing OpenJDK"

# --- Paths de Play e Ivy ---
PLAY_PATH=".play"
IVY_PATH=".ivy2"

cd "$BUILD_DIR"

# --- Restaurar cache de Play e Ivy si existe ---
for DIR in "$PLAY_PATH" "$IVY_PATH"; do
  rm -rf "$DIR"
  if [ -d "$CACHE_DIR/$DIR" ]; then
    echo "Restoring cache for $DIR"
    cp -r "$CACHE_DIR/$DIR" "$DIR"
  fi
done

# --- Ivy overlay opcional ---
if [ -d "${IVY_PATH}-overlay" ]; then
  echo "-----> Installing custom Ivy files..."
  mkdir -p "$IVY_PATH"
  mv "${IVY_PATH}-overlay"/* "$IVY_PATH"
fi

# --- Detectar versión de Play desde conf/dependencies.yml (función del common.sh) ---
PLAY_VERSION="$(get_play_version "$BUILD_DIR/conf/dependencies.yml")"
DEFAULT_PLAY_VERSION="1.3.1"
VERSION_DECLARED=true

if [ -z "$PLAY_VERSION" ]; then
  PLAY_VERSION="$DEFAULT_PLAY_VERSION"
  VERSION_DECLARED=false
  echo "-----> WARNING: Play! version not specified in dependencies.yml. Using default: $PLAY_VERSION"
fi

# --- Instalar/actualizar Play (preferir flujo centralizado del common.sh) ---
if [ ! -f "$PLAY_PATH/play" ]; then
  install_play "$PLAY_VERSION"
else
  INSTALLED_PLAY_VERSION="$(cat "$PLAY_PATH/framework/src/play/version" 2>/dev/null || echo "")"
  if [ "$INSTALLED_PLAY_VERSION" != "$PLAY_VERSION" ] && $VERSION_DECLARED; then
    echo "-----> Updating Play! from $INSTALLED_PLAY_VERSION to $PLAY_VERSION..."
    rm -rf "$PLAY_PATH"
    install_play "$PLAY_VERSION"
  fi
fi

# --- Construcción de la app ---
echo "-----> Building Play! application..."
"$PLAY_PATH/play" version | indent

APP_DIR="."
echo "       Building app at $APP_DIR"

DEPENDENCIES_CMD="$PLAY_PATH/play dependencies $APP_DIR --forProd --forceCopy --silent -Duser.home=$BUILD_DIR 2>&1"
echo "       Resolving dependencies..."
eval "$DEPENDENCIES_CMD" | indent
check_compile_status

PRECOMPILE_CMD="$PLAY_PATH/play precompile $APP_DIR --silent 2>&1"
echo "       Precompiling application..."
eval "$PRECOMPILE_CMD" | indent
check_compile_status

# --- Guardar cache ---
for DIR in "$PLAY_PATH" "$IVY_PATH"; do
  rm -rf "$CACHE_DIR/$DIR"
  cp -r "$DIR" "$CACHE_DIR/$DIR"
done

# --- PATH de runtime ---
PROFILE_PATH="$BUILD_DIR/.profile.d/play.sh"
mkdir -p "$(dirname "$PROFILE_PATH")"
cat > "$PROFILE_PATH" <<EOF
export PATH="/app/.play:/app/.jdk/bin:/app/.tools:\$PATH"
EOF

# --- Limpiar deps de build ---
rm -rf "$IVY_PATH"
remove_play "$BUILD_DIR" "$PLAY_VERSION"

# --- Procfile por defecto si no existe ---
if [ ! -f Procfile ]; then
  echo "-----> No Procfile found. Default process: "
  echo "       play run --http.port=\$PORT \$PLAY_OPTS"
fi
